// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: humans.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createHuman = `-- name: CreateHuman :one
INSERT INTO humans (id, name, surname, patronymic, age, gender, country, created_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    CURRENT_TIMESTAMP
) RETURNING id, name, surname, patronymic, age, gender, country, created_at
`

type CreateHumanParams struct {
	Name       string         `json:"name"`
	Surname    string         `json:"surname"`
	Patronymic sql.NullString `json:"patronymic"`
	Age        int32          `json:"age"`
	Gender     string         `json:"gender"`
	Country    string         `json:"country"`
}

func (q *Queries) CreateHuman(ctx context.Context, arg CreateHumanParams) (Human, error) {
	row := q.db.QueryRowContext(ctx, createHuman,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Age,
		arg.Gender,
		arg.Country,
	)
	var i Human
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHuman = `-- name: DeleteHuman :one
DELETE FROM humans
WHERE id = $1
RETURNING id, name, surname, patronymic, age, gender, country, created_at
`

func (q *Queries) DeleteHuman(ctx context.Context, id uuid.UUID) (Human, error) {
	row := q.db.QueryRowContext(ctx, deleteHuman, id)
	var i Human
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const getHumanByID = `-- name: GetHumanByID :one
SELECT id, name, surname, patronymic, age, gender, country, created_at FROM humans 
WHERE id = $1
`

func (q *Queries) GetHumanByID(ctx context.Context, id uuid.UUID) (Human, error) {
	row := q.db.QueryRowContext(ctx, getHumanByID, id)
	var i Human
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const getHumans = `-- name: GetHumans :many
SELECT id, name, surname, patronymic, age, gender, country, created_at FROM humans
`

func (q *Queries) GetHumans(ctx context.Context) ([]Human, error) {
	rows, err := q.db.QueryContext(ctx, getHumans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Human
	for rows.Next() {
		var i Human
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.Age,
			&i.Gender,
			&i.Country,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHuman = `-- name: UpdateHuman :one
UPDATE humans
SET name = $2, surname = $3, patronymic = $4, age = $5, gender = $6, country = $7
WHERE id = $1
RETURNING id, name, surname, patronymic, age, gender, country, created_at
`

type UpdateHumanParams struct {
	ID         uuid.UUID      `json:"id"`
	Name       string         `json:"name"`
	Surname    string         `json:"surname"`
	Patronymic sql.NullString `json:"patronymic"`
	Age        int32          `json:"age"`
	Gender     string         `json:"gender"`
	Country    string         `json:"country"`
}

func (q *Queries) UpdateHuman(ctx context.Context, arg UpdateHumanParams) (Human, error) {
	row := q.db.QueryRowContext(ctx, updateHuman,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Age,
		arg.Gender,
		arg.Country,
	)
	var i Human
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.Age,
		&i.Gender,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}
